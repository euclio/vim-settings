priority -55

global !p
import string, vim

""" Maps a filetype to comment format used for boxes.
Automatically filled during usage"""
_commentDict = { }

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags, text = next(i).split(':', 1)

            if len(flags) == 0:
                rv.append((text, text, text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif 's' in flags and 'O' not in flags:
                ctriple = []
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags,text = next(i).split(':', 1)
                assert(flags[0] == 'm')
                ctriple.append(text)

                flags,text = next(i).split(':', 1)
                assert(flags[0] == 'e')
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)
            elif 'b' in flags:
                if len(text) == 1:
                    rv.insert(0, (text,text,text, ""))
    except StopIteration:
        return rv


def _get_comment_format():
    """ Returns a 4-element tuple representing the comment format for
    the current file. """
    return _parse_comments(vim.eval("&comments"))[0]


def make_box(twidth, bwidth=None):
    b, m, e, i = _get_comment_format()
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m[0] + 2 * m[0]
    mlines = i + m + " "
    mlinee = " " + " " * (bwidth - twidth) + m
    eline = i + m + bwidth_inner * m[0] + 2 * m[0] + e
    return sline, mlines, mlinee, eline
endglobal


snippet dbox "A nice box around a documentation comment" b
`!p
if not snip.c:
    width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
(top, mid_left, mid_right, bot) = make_box(len(t[1]), width)
snip.rv = top
snip += mid_left
`${1:method name}`!p
snip += mid_left[:-1]
snip += mid_left + 'Description:'
snip += mid_left + '\t'
`${2:description}`!p
snip += mid_left[:-1]
snip += mid_left + 'Parameters:'
snip += mid_left + '\t'
`${3:parameters}`!p
snip += mid_left[:-1]
snip += mid_left + 'Return Value:'
snip += mid_left + '\t'
`${4:return value}`!p
snip += bot`$0
endsnippet
